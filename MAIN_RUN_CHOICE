import plotly.express as px
import pandas as pd
from tkinter import *
import torch.nn.functional as F
from torch import Tensor
from transformers import AutoTokenizer, AutoModel
import numpy as np
import csv
from tkinter import *
from tkinter import ttk 
import plotly.graph_objects as go
import json
from csv import writer
import re
from collections import Counter


june_no = 0
july_no = 0
jan_no = 0
feb_no = 0
mar_no = 0
apr_no = 0
may_no = 0
june_found = 0
july_found = 0
jan_found= 0
feb_found = 0
mar_found = 0
apr_found = 0
may_found = 0
june_hash = 0
july_hash = 0
jan_hash = 0
feb_hash = 0
mar_hash = 0
apr_hash = 0
may_hash = 0
june_dates = []
july_dates = []
jan_dates = []
feb_dates = []
mar_dates = []
apr_dates = []
may_dates = []


def find_most_common_hashtags(texts):
    hashtags = []
    for text in texts:
        found_hashtags = re.findall(r'#(\w+)', text)
        hashtags.extend(found_hashtags)
    hashtag_counter = Counter(hashtags)
    most_common_hashtags = hashtag_counter.most_common()
    return most_common_hashtags

def average_pool(last_hidden_states: Tensor,
                 attention_mask: Tensor) -> Tensor:
    last_hidden = last_hidden_states.masked_fill(~attention_mask[..., None].bool(), 0.0)
    return last_hidden.sum(dim=1) / attention_mask.sum(dim=1)[..., None]

def detector(topic,tweet):
    input_texts = [topic, tweet]

    tokenizer = AutoTokenizer.from_pretrained("thenlper/gte-large")
    model = AutoModel.from_pretrained("thenlper/gte-large")

    # Tokenize the input texts
    batch_dict = tokenizer(input_texts, max_length=512, padding=True, truncation=True, return_tensors='pt')

    outputs = model(**batch_dict)
    embeddings = average_pool(outputs.last_hidden_state, batch_dict['attention_mask'])

    # (Optionally) normalize embeddings
    embeddings = F.normalize(embeddings, p=2, dim=1)
    scores = (embeddings[:1] @ embeddings[1:].T) * 100
    return (scores)

    
def main(country, topic, date, arr, lon, lat,created_date):
    new_arr = []
    new_lat = []
    new_lon = []
    new_score = []
    temp_no_scores = 0
    maintweets = 0
    new_date = []
    for index, x in enumerate(arr, start=1): 
        tweet = x
        try:
            score = detector(topic,tweet)
        except:
            index = index + 1
        temp_no_scores = temp_no_scores +1
        print(score)
        print(temp_no_scores)
        for y in score:
            if y>80:
                maintweets = maintweets + 1
                temp_index = index - 1
                print(temp_index)
                print(arr)
                if (country == "United States" ):
                    if (date == 'August 21'):
                        temp_index = temp_index + 23130
                    if (date == 'July 21'):
                        temp_index = temp_index + 7634
                    if (date == 'June 21'):
                        temp_index = temp_index + 34212
                    if (date == 'September 21'):
                        temp_index = temp_index + 7618
                    if (date == 'October 21'):
                        temp_index = temp_index + 5960
                items_list = list(arr.items())
                print(items_list[temp_index])
                try:
                    items_list = list(arr.items())
                    new_arr.append(items_list[temp_index])
                    items_list = list(lat.items())
                    new_lat.append(items_list[temp_index])
                    items_list = list(lon.items())
                    new_lon.append(items_list[temp_index])
                    items_list = list(created_date.items())
                    new_date.append(items_list[temp_index])
                    temp_score = y
                    new_score.append(((temp_score.item()-75)*5))
                    print(new_arr, new_lat, new_lon, new_date)
                    print([item[1] for item in new_arr])
                    print(new_score)
                except:
                    index = index + 1


    texts_list = [str(item) for item in new_arr]
    most_common_hashtags = find_most_common_hashtags(texts_list)
    hashtagcount = 0
    for hashtag, count in most_common_hashtags:
        if count >= 2:
            for index, element in enumerate(arr):
                if hashtag in element:
                    items_list = list(arr.items())
                    new_arr.append(items_list[index])
                    items_list = list(lat.items())
                    new_lat.append(items_list[index])
                    items_list = list(created_date.items())
                    new_date.append(items_list[index])
                    items_list = list(lon.items())
                    new_lon.append(items_list[index])
                    new_score.append(((80-75)*5))
                    hashtagcount = hashtagcount + 1

    date_numbers = []
    for item in new_date:
        match = re.match(r'(\d{2})/', item[1])  
        if match:
            date_numbers.append(int(match.group(1)))  
    print(date_numbers)

    d = {"text": [item[1] for item in new_arr], "lat": [item[1] for item in new_lat], "lon": [item[1] for item in new_lon],"score": new_score}
    totalcount = 0
    for x in new_arr:
        totalcount = totalcount + 1
    print(len(new_arr), maintweets, totalcount)
    tweetsfound = len(new_arr) - maintweets

    print(tweetsfound)
    print(new_arr)
    classA = pd.DataFrame(
    d
    )
    print(classA)

    fig = px.scatter_geo(classA, lat='lat', lon='lon', title='Map', hover_name='text', size='score')
    print()
    if (country == 'Australia'): 
        fig.update_layout(
            title = ("Number of tweets:" + str(len(arr)) + " Date: " + str(date) + " " + topic + "Tweets found: {}".format(totalcount)),
            geo_scope='world'
        )
        if (date == 'jun 21'):
                global june_no
                global june_found
                global june_hash
                global june_dates
                june_dates = date_numbers
                june_hash = hashtagcount
                june_no = len(arr)
                june_found = totalcount
        if (date == 'jul 21'):
                global july_no
                global july_found
                global july_hash
                global july_dates
                july_dates = date_numbers
                july_hash = hashtagcount
                july_no = len(arr)
                july_found = totalcount
        if (date == 'jan 21'):
                global jan_no
                global jan_found
                global jan_hash
                global jan_dates
                jan_dates = date_numbers
                jan_hash = hashtagcount
                jan_no = len(arr)
                jan_found = totalcount
                print(jan_found,jan_no)
        if (date == 'feb21'):
                global feb_no
                global feb_found
                global feb_hash
                global feb_dates
                feb_dates = date_numbers
                feb_hash = hashtagcount
                feb_no = len(arr)
                feb_found = totalcount
                print(feb_found,feb_no)
        if (date == 'mar21'):
                global mar_no
                global mar_found
                global mar_hash
                global mar_dates
                mar_dates = date_numbers
                mar_hash = hashtagcount
                mar_no = len(arr)
                mar_found = totalcount
        if (date == 'apr21'):
                global apr_no
                global apr_found
                global apr_hash
                global apr_dates
                apr_dates = date_numbers
                apr_hash = hashtagcount
                apr_no = len(arr)
                apr_found = totalcount        
        if (date == 'may21'):
                global may_no
                global may_found
                global may_hash
                global may_dates
                may_dates = date_numbers
                may_hash = hashtagcount
                may_no = len(arr)
                may_found = totalcount
    if (country == 'Canada'):   
        fig.update_layout(
            title = ("Number of tweets:" + str(len(arr)) + " Date: " + str(date) + " " + topic + "Tweets found: {}".format(totalcount)),
            geo_scope='north america'
        )
        if (date == 'jun 21'):
                june_no
                june_found
                june_hash
                june_dates
                june_dates = date_numbers
                june_hash = hashtagcount
                june_no = len(arr)
                june_found = totalcount
        if (date == 'jul 21'):
                july_no
                july_found
                july_hash
                july_dates
                july_dates = date_numbers
                july_hash = hashtagcount
                july_no = len(arr)
                july_found = totalcount
        if (date == 'jan 21'):
                jan_no
                jan_found
                jan_hash
                jan_dates
                jan_dates = date_numbers
                jan_hash = hashtagcount
                jan_no = len(arr)
                jan_found = totalcount
                print(jan_found,jan_no)
        if (date == 'feb21'):
                feb_no
                feb_found
                feb_hash
                feb_dates
                feb_dates = date_numbers
                feb_hash = hashtagcount
                feb_no = len(arr)
                feb_found = totalcount
                print(feb_found,feb_no)
        if (date == 'mar21'):
                mar_no
                mar_found
                mar_hash
                mar_dates
                mar_dates = date_numbers
                mar_hash = hashtagcount
                mar_no = len(arr)
                mar_found = totalcount
        if (date == 'apr21'):
                apr_no
                apr_found
                apr_hash
                apr_dates
                apr_dates = date_numbers
                apr_hash = hashtagcount
                apr_no = len(arr)
                apr_found = totalcount        
        if (date == 'may21'):
                may_no
                may_found
                may_hash
                may_dates
                may_dates = date_numbers
                may_hash = hashtagcount
                may_no = len(arr)
                may_found = totalcount
    if (country == 'United States'):   
        fig.update_layout(
            title = ("Number of tweets:" + str(len(arr)) + " Date: " + str(date) + " " + topic + "Tweets found: {}".format(totalcount)),
            geo_scope='usa'
        )
        if (date == 'jun 21'):
                june_no
                june_found
                june_hash
                june_dates
                june_dates = date_numbers
                june_hash = hashtagcount
                june_no = len(arr)
                june_found = totalcount
        if (date == 'jul 21'):
                july_no
                july_found
                july_hash
                july_dates
                july_dates = date_numbers
                july_hash = hashtagcount
                july_no = len(arr)
                july_found = totalcount
        if (date == 'jan 21'):
                jan_no
                jan_found
                jan_hash
                jan_dates
                jan_dates = date_numbers
                jan_hash = hashtagcount
                jan_no = len(arr)
                jan_found = totalcount
                print(jan_found,jan_no)
        if (date == 'feb21'):
                feb_no
                feb_found
                feb_hash
                feb_dates
                feb_dates = date_numbers
                feb_hash = hashtagcount
                feb_no = len(arr)
                feb_found = totalcount
                print(feb_found,feb_no)
        if (date == 'mar21'):
                mar_no
                mar_found
                mar_hash
                mar_dates
                mar_dates = date_numbers
                mar_hash = hashtagcount
                mar_no = len(arr)
                mar_found = totalcount
        if (date == 'apr21'):
                apr_no
                apr_found
                apr_hash
                apr_dates
                apr_dates = date_numbers
                apr_hash = hashtagcount
                apr_no = len(arr)
                apr_found = totalcount        
        if (date == 'may21'):
                may_no
                may_found
                may_hash
                may_dates
                may_dates = date_numbers
                may_hash = hashtagcount
                may_no = len(arr)
                may_found = totalcount
    fig.show()
    filename = topic + date +".html"
    fig.write_html(filename)

def initialiser (country):
    Australia_topics = []
    Australia_dates = []
    parseAustraliaTopics = ["Unlikely Trade in Japan Bonds Gets Revived by Australian Funds06 May 2021, 11:37 AM IST","KKR-Backed Pepper Money Expands Australia‚Äôs Biggest IPO of 202106 May 2021, 11:34 AM IST","Australia‚Äôs Budget Position to Be¬†25% Better Off Than December Estimate:¬†Economists06 May 2021, 9:51 AM IST","Australia May Not Open Border Until Late 2022, Minister Says07 May 2021, 5:25 AM IST","Australia to Resume Repatriation Flights From India on May 1507 May 2021, 5:13 AM IST","China Halts Australia Economic Dialogue in New Retaliation06 May 2021, 8:25 AM IST","Australia‚Äôs Battered Morrison Bets on Budget to Repair Image07 May 2021, 12:30 AM IST","ANZ CEO Not Ruling Out Purchase of Citi Australia Retail Assets05 May 2021, 5:42 AM IST","Sanjeev Gupta‚Äôs Australian Operations Signs New Funding to Keep Running05 May 2021, 12:01 PM IST","National Australia Bank Profit Surges on Economic Recovery06 May 2021, 3:37 AM IST","IPOs Boom at the Fastest Pace Since 2007 in Australia04 May 2021, 11:34 AM IST","Australia Central Bank Lifts Outlook, to Review YCC in July04 May 2021, 10:08 AM IST","Australia Net Exports to Drag on First Quarter GDP, Capital Says04 May 2021, 8:03 AM IST","Australia Budget Deficit to Narrow Sharply, Westpac‚Äôs Evans Says04 May 2021, 12:37 PM IST","ANZ Bank Profit Rises as Australia‚Äôs Economic Rebound Builds05 May 2021, 3:33 AM IST","Australia Probe of China Port Signals Trouble for Beijing04 May 2021, 6:11 AM IST","Australia‚Äôs Housing Boom Shows Signs of Slowing03 May 2021, 5:30 AM IST","Australia Is Reviewing China‚Äôs Ownership of a Darwin Port03 May 2021, 5:40 AM IST","Australia Defends Ban on Citizens Returning From Virus-Hit India03 May 2021, 8:16 AM IST","Bitcoin Miner Iris Is Said to Weigh Australia‚Äôs First SPAC Deal04 May 2021, 12:30 AM IST","Morrison‚Äôs Liberals Claim Victory in Australian State¬†Election02 May 2021, 10:42 AM IST","Australia Budget Deficit to Be A$167 Billion This Year: Deloitte02 May 2021, 7:31 PM IST"]
    Canada_topics = []
    Canada_dates = []
    parseCanadaTopics = ["Fresh Lockdowns Create Pothole on Canada’s Road to Jobs Recovery06 May 2021, 7:03 PM IST","Canada Approves Pfizer Covid Shot for Adolescents05 May 2021, 8:42 PM IST","Canada’s Vaccine Push Plagued by Confusion, Erratic Supply06 May 2021, 2:15 AM IST","Suncor Sees Vaccines as Solution to Canada’s Lagging Oil Demand05 May 2021, 2:55 AM IST",
        "Moderna Booster Effective; Canada May Mix Shots: Virus Update05 May 2021, 4:27 AM IST",
        "Covid Outbreak Grips Canada Oil Sands Just as Roughnecks Fly In28 Apr 2021, 3:30 PM IST",
        "Trudeau’s Finance Chief Says Spending Won’t Dent Canada’s Brand29 Apr 2021, 12:48 AM IST",
        "Biden-Powell Duo, Canada’s Reputation, Supply Issues: Eco Day29 Apr 2021, 4:56 PM IST",
        "Transat Rises as Canada Grants $570 Million in Crisis Loans29 Apr 2021, 4:59 PM IST",
        "Frustration Builds on World’s Longest Border as Canada Goes Slow on Reopening26 Apr 2021, 6:01 PM IST",
        "Canada Avoids Election With Lawmakers Backing Trudeau Budget27 Apr 2021, 4:53 AM IST",
        "Hummingbirds Halt Work on Canada’s Biggest Oil Pipeline Project27 Apr 2021, 3:21 AM IST",
        "Trudeau Hits Back Against Criticism of Canada as Climate Laggard27 Apr 2021, 6:30 PM IST",
        "Macklem Stresses Bank of Canada’s Commitment to 2% Inflation28 Apr 2021, 3:38 AM IST",
        "Australia’s Stimulus Debate Gets a Jolt From Canada’s Taper22 Apr 2021, 8:16 AM IST",
        "Trudeau Vows to Speed Up Emissions Cuts for Canada, a G7 Laggard22 Apr 2021, 7:48 PM IST",
        "Canada Bans Flights From Covid-Hit India, Pakistan for 30 Days23 Apr 2021, 3:21 AM IST",
        "Capital Pains, Canada’s Global Warning, Policy Potency: Eco Day23 Apr 2021, 4:42 AM IST",
        "Inflation Forces the Bank of Canada’s Hand Ahead of Fed and ECB23 Apr 2021, 1:28 AM IST",
        "Bank of Canada’s More Hawkish Tone Is ‘Prudent,’ Vachon Says23 Apr 2021, 11:10 PM IST",
        "National Bank CEO Floats Axing Blind Bids to Cool Canada Housing23 Apr 2021, 9:22 PM IST",
        "Pharma Sector Check - Will U.S. FDA Follow Canada, U.K. In Recalling Losartan? Motilal Oswal23 Sep 2021, 10:32 AM IST",
        "Retail Sales in Canada Rebound After Stalling in Early Summer23 Sep 2021, 6:16 PM IST",
        "SNC-Lavalin Drops After Canada Police Lay Fraud, Forgery Charges23 Sep 2021, 8:04 PM IST",
        "Real Estate Frenzy to Crest in 2021, Canada’s Housing Agency Says06 May 2021, 10:47 PM IST",
        "Amazon Postpones Prime Day Sale in Canada, India Due to Covid-1907 May 2021, 2:19 AM IST",
        "Canada’s Boralex Weighs Sale of Stake in French Unit23 Sep 2021, 2:06 PM IST"]
    US_topics = []
    US_dates = []
    parseUSTopics = ["EU Ready to Discuss U.S. Plan to Waive Vaccine Patent Protection06 May 2021, 12:51 PM IST",
                "McConnell Says U.S. Afghan Withdrawal Means Return of Taliban06 May 2021, 11:27 PM IST",
                "China Must Be Responsible for Falling Rocket, U.S. Lawmaker Says07 May 2021, 12:43 AM IST",
                "Norwegian Cruise CEO Rules Out July U.S. Start; Shares Drop06 May 2021, 8:55 PM IST",
                "U.S. Mortgage Rates Slip to Lowest Level in Almost Three Months06 May 2021, 7:30 PM IST",
                "Millions in Taliban Taxes Show Who’s in Charge as U.S. Departs26 Apr 2021, 3:30 PM IST",
                "Harris Pledges $310 Million in Aid to Stem Crisis at U.S. Border27 Apr 2021, 5:17 AM IST",
                "Strategists See Opportunity for Rotation Trades Amid U.S. Vaccine Success26 Apr 2021, 6:19 PM IST",
                "Gain in U.S. Durables Orders Trails Forecast on Plane Bookings26 Apr 2021, 6:46 PM IST",
                "U.S. Trade Chief Meets Pfizer, AstraZeneca About Vaccine Supply27 Apr 2021, 7:09 AM IST",
                "U.S. Plastic Surgeons Expect Boom in Procedures Below Zoom Line27 Apr 2021, 5:35 PM IST",
                "U.S. Price Rises, Biden’s Appeal, Fish Deal: Eco Day27 Apr 2021, 4:53 PM IST",
                "Canadian Pot Producer Valens to Buy Florida Firm in U.S. Push27 Apr 2021, 3:30 PM IST",
                "Consumer Confidence in U.S. Climbed in April to Pandemic High27 Apr 2021, 7:41 PM IST",
                "U.S. Home Prices Surge Most Since 2006 With Tight Inventory27 Apr 2021, 6:30 PM IST",
                "Corn Rally Gets Lift With U.S. Road Trips Stoking Biofuel Demand27 Apr 2021, 9:13 PM IST",
                "France Demands More From EU on Growth as U.S., China Race Ahead27 Apr 2021, 6:38 PM IST",
                "U.S. Missile Defense Warhead Program to Cost Almost $18 Billion27 Apr 2021, 9:59 PM IST",
                "Nigerian President Asks for U.S. Support to Tackle Insecurity27 Apr 2021, 9:47 PM IST",
                "U.S. College Enrollment Hits Two-Decade Low in 202027 Apr 2021, 11:25 PM IST",
                "U.S. Investigating 2 New Clotting Cases Tied to J&J Vaccine27 Apr 2021, 7:40 PM IST",
                "Lilly Cuts Forecast After U.S. Covid Drug Order Cancelled27 Apr 2021, 9:05 PM IST",
                "Amazon to Pass Walmart in U.S. Retail Sales in 2025, Report Says27 Apr 2021, 5:30 PM IST",
                "U.S. Truck Boom Shows Why Oil’s Demand Comeback Is Here to Stay27 Apr 2021, 3:30 PM IST",
                "How the U.S. Taxes Estates and Heirs, and What May Change27 Apr 2021, 8:17 PM IST",
                "France, Germany Support U.S. 21% Tax Plan for Corporations27 Apr 2021, 1:24 PM IST",
                "France Plans Talks on U.S. Flights as It Trials Vaccine Passport27 Apr 2021, 5:24 PM IST"]

    if (country == 'Australia'): 
        for topic in parseAustraliaTopics:
            jan21 = []
            feb21 = []
            mar21 = []
            apr21 = []
            may21 = []
            jun21 = []
            jul21 = []
            file = '2021_July_twitter_trending_data.csv' 
            df = pd.read_csv(file)
            df2 = df[df['searched_hashtag_country'] == country] 
            df3 = df2[["searched_hashtag_country","tweet_text","latitude","longitude","user_created_datetime"]]
            file = '2021_June_twitter_trending_data.csv'
            df = pd.read_csv(file)
            df2 = df[df['searched_hashtag_country'] == country] 
            df4 = df2[["searched_hashtag_country","tweet_text","latitude","longitude","user_created_datetime"]]
            file = '2021_September_twitter_trending_data.csv'
            df = pd.read_csv(file)
            df2 = df[df['searched_hashtag_country'] == country] 
            df5 = df2[["searched_hashtag_country","tweet_text","latitude","longitude","user_created_datetime"]]
            file = '2021_October_twitter_trending_data.csv'
            df = pd.read_csv(file)
            df2 = df[df['searched_hashtag_country'] == country] 
            df6 = df2[["searched_hashtag_country","tweet_text","latitude","longitude","user_created_datetime"]]

            df7 = pd.concat([df3, df4, df5, df6], ignore_index=True)

            jan21 = df7[df7['user_created_datetime'].str.contains('01/2021')]
            feb21 = df7[df7['user_created_datetime'].str.contains('02/2021')]
            mar21 = df7[df7['user_created_datetime'].str.contains('03/2021')]
            apr21 = df7[df7['user_created_datetime'].str.contains('04/2021')]
            may21 = df7[df7['user_created_datetime'].str.contains('05/2021')]
            jun21 = df7[df7['user_created_datetime'].str.contains('06/2021')]
            jul21 = df7[df7['user_created_datetime'].str.contains('07/2021')]

            arr = jan21["tweet_text"]
            lat = jan21["latitude"]
            lon = jan21["longitude"]
            created_date = jan21["user_created_datetime"]
            date = "jan 21"
            main(country, topic, date, arr, lon, lat,created_date)
            arr = feb21["tweet_text"]
            lat = feb21["latitude"]
            lon = feb21["longitude"]
            created_date = feb21["user_created_datetime"]
            date = "feb21"
            main(country, topic, date, arr, lon, lat,created_date)
            arr = mar21["tweet_text"]
            lat = mar21["latitude"]
            lon = mar21["longitude"]
            created_date = mar21["user_created_datetime"]
            date = "mar21"
            main(country, topic, date, arr, lon, lat,created_date)
            arr = apr21["tweet_text"]
            lat = apr21["latitude"]
            lon = apr21["longitude"]
            created_date = apr21["user_created_datetime"]
            date = "apr21"
            main(country, topic, date, arr, lon, lat,created_date)
            arr = may21["tweet_text"]
            lat = may21["latitude"]
            lon = may21["longitude"]
            created_date = may21["user_created_datetime"]
            date = "may21"
            main(country, topic, date, arr, lon, lat,created_date)
            arr = jun21["tweet_text"]
            lat = jun21["latitude"]
            lon = jun21["longitude"]
            created_date = jun21["user_created_datetime"]
            date = "jun 21"
            main(country, topic, date, arr, lon, lat,created_date)
            arr = jul21["tweet_text"]
            lat = jul21["latitude"]
            lon = jul21["longitude"]
            created_date = jul21["user_created_datetime"]
            date = "jul 21"
            main(country, topic, date, arr, lon, lat,created_date)

            if (june_found != 0):
                june_percent = ((june_found/june_no)*100)
                print(june_percent)
            else:
                june_percent = 0

            if (july_found != 0):
                july_percent = ((july_found/july_no)*100)
            else:
                july_percent = 0

            if (jan_found != 0):
                jan_percent = ((jan_found/jan_no)*100)
            else:
                jan_percent = 0

            if (feb_found != 0):
                feb_percent = ((feb_found/feb_no)*100)
                print(feb_percent)
            else:
                feb_percent = 0

            if (mar_found != 0):
                mar_percent = ((mar_found/mar_no)*100)
            else:
                mar_percent = 0

            if (apr_found != 0):
                apr_percent = ((apr_found/apr_no)*100)
            else:
                apr_percent = 0

            if (may_found != 0):
                may_percent = ((may_found/may_no)*100)
            else:
                may_percent = 0

            print(country, topic, jan_found, jan_no, jan_percent,feb_found, feb_no, feb_percent,mar_found, mar_no, mar_percent, apr_found, apr_no, apr_percent,may_found, may_no,  may_percent, june_found, june_no, june_percent,july_found, july_no, july_percent, jan_hash, feb_hash, mar_hash, apr_hash, june_hash, july_hash, jan_dates,feb_dates, mar_dates,apr_dates,may_dates,june_dates,july_dates)
            List = [country, topic, jan_found, jan_no, jan_percent,feb_found, feb_no, feb_percent,mar_found, mar_no, mar_percent, apr_found, apr_no, apr_percent,may_found, may_no,  may_percent, june_found, june_no, june_percent,july_found, july_no, july_percent, jan_hash, feb_hash, mar_hash, apr_hash, june_hash, july_hash,  jan_dates,feb_dates, mar_dates,apr_dates,may_dates,june_dates,july_dates]
            print(List)
            with open('FINALAUS2.csv', 'a', newline = '') as f_object:
                writer_object = csv.writer(f_object)
                writer_object.writerow(List)
            f_object.close()  


    if (country == 'Canada'): 
        for topic in parseCanadaTopics:
            jan21 = []
            feb21 = []
            mar21 = []
            apr21 = []
            may21 = []
            jun21 = []
            jul21 = []
            file = '2021_July_twitter_trending_datacan.csv' 
            df = pd.read_csv(file)
            df2 = df[df['searched_hashtag_country'] == country] 
            df3 = df2[["searched_hashtag_country","tweet_text","latitude","longitude","user_created_datetime"]]
            file = '2021_June_twitter_trending_datacan.csv'
            df = pd.read_csv(file)
            df2 = df[df['searched_hashtag_country'] == country] 
            df4 = df2[["searched_hashtag_country","tweet_text","latitude","longitude","user_created_datetime"]]
            file = '2021_September_twitter_trending_datacan.csv'
            df = pd.read_csv(file)
            df2 = df[df['searched_hashtag_country'] == country] 
            df5 = df2[["searched_hashtag_country","tweet_text","latitude","longitude","user_created_datetime"]]
            file = '2021_October_twitter_trending_datacan.csv'
            df = pd.read_csv(file)
            df2 = df[df['searched_hashtag_country'] == country] 
            df6 = df2[["searched_hashtag_country","tweet_text","latitude","longitude","user_created_datetime"]]

            df7 = pd.concat([df3, df4, df5, df6], ignore_index=True)

            jan21 = df7[df7['user_created_datetime'].str.contains('01/2021')]
            feb21 = df7[df7['user_created_datetime'].str.contains('02/2021')]
            mar21 = df7[df7['user_created_datetime'].str.contains('03/2021')]
            apr21 = df7[df7['user_created_datetime'].str.contains('04/2021')]
            may21 = df7[df7['user_created_datetime'].str.contains('05/2021')]
            jun21 = df7[df7['user_created_datetime'].str.contains('06/2021')]
            jul21 = df7[df7['user_created_datetime'].str.contains('07/2021')]

            arr = jan21["tweet_text"]
            lat = jan21["latitude"]
            lon = jan21["longitude"]
            created_date = jan21["user_created_datetime"]
            date = "jan 21"
            main(country, topic, date, arr, lon, lat,created_date)
            arr = feb21["tweet_text"]
            lat = feb21["latitude"]
            lon = feb21["longitude"]
            created_date = feb21["user_created_datetime"]
            date = "feb21"
            main(country, topic, date, arr, lon, lat,created_date)
            arr = mar21["tweet_text"]
            lat = mar21["latitude"]
            lon = mar21["longitude"]
            created_date = mar21["user_created_datetime"]
            date = "mar21"
            main(country, topic, date, arr, lon, lat,created_date)
            arr = apr21["tweet_text"]
            lat = apr21["latitude"]
            lon = apr21["longitude"]
            created_date = apr21["user_created_datetime"]
            date = "apr21"
            main(country, topic, date, arr, lon, lat,created_date)
            arr = may21["tweet_text"]
            lat = may21["latitude"]
            lon = may21["longitude"]
            created_date = may21["user_created_datetime"]
            date = "may21"
            main(country, topic, date, arr, lon, lat,created_date)
            arr = jun21["tweet_text"]
            lat = jun21["latitude"]
            lon = jun21["longitude"]
            created_date = jun21["user_created_datetime"]
            date = "jun 21"
            main(country, topic, date, arr, lon, lat,created_date)
            arr = jul21["tweet_text"]
            lat = jul21["latitude"]
            lon = jul21["longitude"]
            created_date = jul21["user_created_datetime"]
            date = "jul 21"
            main(country, topic, date, arr, lon, lat,created_date)

            if (june_found != 0):
                june_percent = ((june_found/june_no)*100)
                print(june_percent)
            else:
                june_percent = 0

            if (july_found != 0):
                july_percent = ((july_found/july_no)*100)
            else:
                july_percent = 0

            if (jan_found != 0):
                jan_percent = ((jan_found/jan_no)*100)
            else:
                jan_percent = 0

            if (feb_found != 0):
                feb_percent = ((feb_found/feb_no)*100)
                print(feb_percent)
            else:
                feb_percent = 0

            if (mar_found != 0):
                mar_percent = ((mar_found/mar_no)*100)
            else:
                mar_percent = 0

            if (apr_found != 0):
                apr_percent = ((apr_found/apr_no)*100)
            else:
                apr_percent = 0

            if (may_found != 0):
                may_percent = ((may_found/may_no)*100)
            else:
                may_percent = 0

            print(country, topic, jan_found, jan_no, jan_percent,feb_found, feb_no, feb_percent,mar_found, mar_no, mar_percent, apr_found, apr_no, apr_percent,may_found, may_no,  may_percent, june_found, june_no, june_percent,july_found, july_no, july_percent, jan_hash, feb_hash, mar_hash, apr_hash, june_hash, july_hash, jan_dates,feb_dates, mar_dates,apr_dates,may_dates,june_dates,july_dates)
            List = [country, topic, jan_found, jan_no, jan_percent,feb_found, feb_no, feb_percent,mar_found, mar_no, mar_percent, apr_found, apr_no, apr_percent,may_found, may_no,  may_percent, june_found, june_no, june_percent,july_found, july_no, july_percent, jan_hash, feb_hash, mar_hash, apr_hash, june_hash, july_hash,  jan_dates,feb_dates, mar_dates,apr_dates,may_dates,june_dates,july_dates]
            print(List)
            with open('FINALCAN2.csv', 'a', newline = '') as f_object:
                writer_object = csv.writer(f_object)
                writer_object.writerow(List)
            f_object.close() 

    if (country == 'United States'): 
        for topic in parseUSTopics:
            jan21 = []
            feb21 = []
            mar21 = []
            apr21 = []
            may21 = []
            jun21 = []
            jul21 = []
            file = '2021_July_twitter_trending_dataus.csv' 
            df = pd.read_csv(file)
            df2 = df[df['searched_hashtag_country'] == country] 
            df3 = df2[["searched_hashtag_country","tweet_text","latitude","longitude","user_created_datetime"]]
            file = '2021_June_twitter_trending_dataus.csv'
            df = pd.read_csv(file)
            df2 = df[df['searched_hashtag_country'] == country] 
            df4 = df2[["searched_hashtag_country","tweet_text","latitude","longitude","user_created_datetime"]]
            file = '2021_September_twitter_trending_dataus.csv'
            df = pd.read_csv(file)
            df2 = df[df['searched_hashtag_country'] == country] 
            df5 = df2[["searched_hashtag_country","tweet_text","latitude","longitude","user_created_datetime"]]
            file = '2021_October_twitter_trending_dataus.csv'
            df = pd.read_csv(file)
            df2 = df[df['searched_hashtag_country'] == country] 
            df6 = df2[["searched_hashtag_country","tweet_text","latitude","longitude","user_created_datetime"]]

            df7 = pd.concat([df3, df4, df5, df6], ignore_index=True)

            jan21 = df7[df7['user_created_datetime'].str.contains('01/2021')]
            feb21 = df7[df7['user_created_datetime'].str.contains('02/2021')]
            mar21 = df7[df7['user_created_datetime'].str.contains('03/2021')]
            apr21 = df7[df7['user_created_datetime'].str.contains('04/2021')]
            may21 = df7[df7['user_created_datetime'].str.contains('05/2021')]
            jun21 = df7[df7['user_created_datetime'].str.contains('06/2021')]
            jul21 = df7[df7['user_created_datetime'].str.contains('07/2021')]

            arr = jan21["tweet_text"]
            lat = jan21["latitude"]
            lon = jan21["longitude"]
            created_date = jan21["user_created_datetime"]
            date = "jan 21"
            main(country, topic, date, arr, lon, lat,created_date)
            arr = feb21["tweet_text"]
            lat = feb21["latitude"]
            lon = feb21["longitude"]
            created_date = feb21["user_created_datetime"]
            date = "feb21"
            main(country, topic, date, arr, lon, lat,created_date)
            arr = mar21["tweet_text"]
            lat = mar21["latitude"]
            lon = mar21["longitude"]
            created_date = mar21["user_created_datetime"]
            date = "mar21"
            main(country, topic, date, arr, lon, lat,created_date)
            arr = apr21["tweet_text"]
            lat = apr21["latitude"]
            lon = apr21["longitude"]
            created_date = apr21["user_created_datetime"]
            date = "apr21"
            main(country, topic, date, arr, lon, lat,created_date)
            arr = may21["tweet_text"]
            lat = may21["latitude"]
            lon = may21["longitude"]
            created_date = may21["user_created_datetime"]
            date = "may21"
            main(country, topic, date, arr, lon, lat,created_date)
            arr = jun21["tweet_text"]
            lat = jun21["latitude"]
            lon = jun21["longitude"]
            created_date = jun21["user_created_datetime"]
            date = "jun 21"
            main(country, topic, date, arr, lon, lat,created_date)
            arr = jul21["tweet_text"]
            lat = jul21["latitude"]
            lon = jul21["longitude"]
            created_date = jul21["user_created_datetime"]
            date = "jul 21"
            main(country, topic, date, arr, lon, lat,created_date)

            if (june_found != 0):
                june_percent = ((june_found/june_no)*100)
                print(june_percent)
            else:
                june_percent = 0

            if (july_found != 0):
                july_percent = ((july_found/july_no)*100)
            else:
                july_percent = 0

            if (jan_found != 0):
                jan_percent = ((jan_found/jan_no)*100)
            else:
                jan_percent = 0

            if (feb_found != 0):
                feb_percent = ((feb_found/feb_no)*100)
                print(feb_percent)
            else:
                feb_percent = 0

            if (mar_found != 0):
                mar_percent = ((mar_found/mar_no)*100)
            else:
                mar_percent = 0

            if (apr_found != 0):
                apr_percent = ((apr_found/apr_no)*100)
            else:
                apr_percent = 0

            if (may_found != 0):
                may_percent = ((may_found/may_no)*100)
            else:
                may_percent = 0

            print(country, topic, jan_found, jan_no, jan_percent,feb_found, feb_no, feb_percent,mar_found, mar_no, mar_percent, apr_found, apr_no, apr_percent,may_found, may_no,  may_percent, june_found, june_no, june_percent,july_found, july_no, july_percent, jan_hash, feb_hash, mar_hash, apr_hash, june_hash, july_hash, jan_dates,feb_dates, mar_dates,apr_dates,may_dates,june_dates,july_dates)
            List = [country, topic, jan_found, jan_no, jan_percent,feb_found, feb_no, feb_percent,mar_found, mar_no, mar_percent, apr_found, apr_no, apr_percent,may_found, may_no,  may_percent, june_found, june_no, june_percent,july_found, july_no, july_percent, jan_hash, feb_hash, mar_hash, apr_hash, june_hash, july_hash,  jan_dates,feb_dates, mar_dates,apr_dates,may_dates,june_dates,july_dates]
            print(List)

            with open('FINALUS1.csv', 'a', newline = '') as f_object:
                writer_object = csv.writer(f_object)
                writer_object.writerow(List)
            f_object.close() 




initialiser("United States")
